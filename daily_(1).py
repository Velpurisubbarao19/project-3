# -*- coding: utf-8 -*-
"""Daily (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19J0dCbcEFMDCQBUyVLwzwtVYyL4Ywa3W
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

# Load and preprocess the data
daily_data = pd.read_csv(r"SN_d_tot_V2.0.csv", delimiter=';', header=None)
daily_data.columns = ["Year", "Month", "Day", "FractionalYear", "SunspotNumber", "StdDev", "Observations", "Indicator"]
daily_data = daily_data[daily_data["SunspotNumber"] != -1]  # Remove missing values

# Create a datetime column
daily_data['Date'] = pd.to_datetime(daily_data[['Year', 'Month', 'Day']])
daily_data = daily_data[['Date', 'SunspotNumber']].rename(columns={'Date': 'ds', 'SunspotNumber': 'y'})

# Replace zero values and apply log transformation
daily_data['y'] = daily_data['y'].replace(0, 1e-6)
daily_data['y'] = daily_data['y'].apply(lambda x: np.log(x + 1e-6))
daily_data = daily_data[daily_data['y'] > 0]  # Keep only positive values

# Initialize and fit the Prophet model
daily_model = Prophet()
daily_model.fit(daily_data)

# Create future dataframes for predictions
future_daily = daily_model.make_future_dataframe(periods=365)

# Predict for the next 365 days
forecast_daily = daily_model.predict(future_daily)

# Predict for 100 and 200 days
forecast_daily_100 = daily_model.predict(daily_model.make_future_dataframe(periods=100))
forecast_daily_200 = daily_model.predict(daily_model.make_future_dataframe(periods=200))

# Visualize predictions for each forecast
for forecast, days in zip([forecast_daily_100, forecast_daily_200], [100, 200]):
    fig = daily_model.plot(forecast)
    plt.title(f"Sunspot Forecast: Next {days} Days")
    plt.show()

# Print predicted values for the next 100, 200, and 365 days
for forecast, days in zip([forecast_daily_100, forecast_daily_200, forecast_daily], [100, 200, 365]):
    print(f"Predicted values for the next {days} days:")
    print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(days))

# Final visualization of the daily forecast
fig_final = daily_model.plot(forecast_daily)
plt.title("Daily Sunspot Forecasting")
plt.xlabel("Date")
plt.ylabel("Sunspot Number")
plt.show()

# Fit the model with additional seasonality
daily_model = Prophet(growth='linear', changepoint_prior_scale=0.05)
daily_model.add_seasonality(name='yearly', period=365.25, fourier_order=10)

# Fit and predict again
daily_model.fit(daily_data)
forecast_daily = daily_model.predict(future_daily)

# Calculate metrics for the last 100 days
y_true = daily_data['y'].tail(100)
y_pred = forecast_daily['yhat'][-100:]

mae = mean_absolute_error(y_true, y_pred)
mape = mean_absolute_percentage_error(y_true, y_pred)
r2 = r2_score(y_true, y_pred)

print(f"Metrics for the last 100 days: MAE: {mae}, MAPE: {mape}, RÂ²: {r2}")

